gfs2: Restore kABI changes

Fixing a GFS2 deadlock requires changing struct iomap (page_done pointer
changes to page_ops). This results in the kABI changing. Fix it by
adding a new flag which specifies whether the page_done pointer is
actually a pointer to page_ops. GFS2 uses this flag while unmodified
callers still continue to work as before.

Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
diff --git a/fs/gfs2/bmap.c b/fs/gfs2/bmap.c
index ffb2846e219a..6dee9b753a33 100644
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@ -1111,8 +1111,11 @@ static int gfs2_iomap_begin_write(struct inode *inode, loff_t pos,
 		gfs2_trans_end(sdp);
 	}
 
-	if (gfs2_is_stuffed(ip) || gfs2_is_jdata(ip))
-		iomap->page_ops = &gfs2_iomap_page_ops;
+	if (gfs2_is_stuffed(ip) || gfs2_is_jdata(ip)) {
+		iomap->flags |= IOMAP_F_PAGE_OPS;
+		iomap->page_done = (void (*)(struct inode *, loff_t, unsigned,
+			struct page *, struct iomap *))&gfs2_iomap_page_ops;
+	}
 	return 0;
 
 out_trans_end:
diff --git a/fs/iomap.c b/fs/iomap.c
index 1ccc1e33a914..aa95250d15aa 100644
--- a/fs/iomap.c
+++ b/fs/iomap.c
@@ -651,11 +651,15 @@ static int
 iomap_write_begin(struct inode *inode, loff_t pos, unsigned len, unsigned flags,
 		struct page **pagep, struct iomap *iomap)
 {
-	const struct iomap_page_ops *page_ops = iomap->page_ops;
+	struct iomap_page_ops ops = { .page_done = iomap->page_done };
+	const struct iomap_page_ops *page_ops = &ops;
 	pgoff_t index = pos >> PAGE_SHIFT;
 	struct page *page;
 	int status = 0;
 
+	if (iomap->flags & IOMAP_F_PAGE_OPS)
+		page_ops = (const struct iomap_page_ops *)iomap->page_done;
+
 	BUG_ON(pos + len > iomap->offset + iomap->length);
 
 	if (fatal_signal_pending(current))
@@ -767,10 +771,14 @@ static int
 iomap_write_end(struct inode *inode, loff_t pos, unsigned len,
 		unsigned copied, struct page *page, struct iomap *iomap)
 {
-	const struct iomap_page_ops *page_ops = iomap->page_ops;
+	struct iomap_page_ops ops = { .page_done = iomap->page_done };
+	const struct iomap_page_ops *page_ops = &ops;
 	loff_t old_size = inode->i_size;
 	int ret;
 
+	if (iomap->flags & IOMAP_F_PAGE_OPS)
+		page_ops = (const struct iomap_page_ops *)iomap->page_done;
+
 	if (iomap->type == IOMAP_INLINE) {
 		ret = iomap_write_end_inline(inode, page, iomap, pos, copied);
 	} else if (iomap->flags & IOMAP_F_BUFFER_HEAD) {
diff --git a/include/linux/iomap.h b/include/linux/iomap.h
index abcf51b361ad..0ac37d027b0b 100644
--- a/include/linux/iomap.h
+++ b/include/linux/iomap.h
@@ -42,6 +42,8 @@ struct vm_fault;
 #define IOMAP_F_MERGED		0x10	/* contains multiple blocks/extents */
 #define IOMAP_F_SHARED		0x20	/* block shared with another file */
 
+#define IOMAP_F_PAGE_OPS	0x40	/* page_done is actually page_ops */
+
 /*
  * Flags from 0x1000 up are for file system specific usage:
  */
@@ -65,7 +67,8 @@ struct iomap {
 	struct dax_device	*dax_dev; /* dax_dev for dax operations */
 	void			*inline_data;
 	void			*private; /* filesystem private */
-	const struct iomap_page_ops *page_ops;
+	void (*page_done)(struct inode *inode, loff_t pos, unsigned copied,
+			struct page *page, struct iomap *iomap);
 };
 
 /*
