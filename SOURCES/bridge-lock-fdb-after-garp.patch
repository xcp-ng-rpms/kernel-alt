diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 8034ce9..ffda192 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -12,6 +12,7 @@
  */
 
 #include <linux/kernel.h>
+#include <linux/module.h>
 #include <linux/init.h>
 #include <linux/rculist.h>
 #include <linux/spinlock.h>
@@ -20,6 +21,7 @@
 #include <linux/etherdevice.h>
 #include <linux/jhash.h>
 #include <linux/random.h>
+#include <linux/if_arp.h>
 #include <linux/slab.h>
 #include <linux/atomic.h>
 #include <asm/unaligned.h>
@@ -42,6 +44,12 @@ static int fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
 static void fdb_notify(struct net_bridge *br,
 		       const struct net_bridge_fdb_entry *, int, bool);
 
+static int fdb_garp_lock_time = 5;
+module_param(fdb_garp_lock_time, int, 0600);
+MODULE_PARM_DESC(fdb_garp_lock_time, "Time to lock a FDB entry after a gratuitous ARP, in seconds");
+
+#define NO_GARP_LOCK (jiffies)
+
 int __init br_fdb_init(void)
 {
 	br_fdb_cache = kmem_cache_create("bridge_fdb_cache",
@@ -490,7 +498,8 @@ static struct net_bridge_fdb_entry *fdb_create(struct net_bridge *br,
 					       const unsigned char *addr,
 					       __u16 vid,
 					       unsigned char is_local,
-					       unsigned char is_static)
+					       unsigned char is_static,
+					       unsigned long garp_lock_until)
 {
 	struct net_bridge_fdb_entry *fdb;
 
@@ -505,6 +514,7 @@ static struct net_bridge_fdb_entry *fdb_create(struct net_bridge *br,
 		fdb->added_by_external_learn = 0;
 		fdb->offloaded = 0;
 		fdb->updated = fdb->used = jiffies;
+                fdb->garp_lock_until = garp_lock_until;
 		if (rhashtable_lookup_insert_fast(&br->fdb_hash_tbl,
 						  &fdb->rhnode,
 						  br_fdb_rht_params)) {
@@ -537,7 +547,7 @@ static int fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
 		fdb_delete(br, fdb, true);
 	}
 
-	fdb = fdb_create(br, source, addr, vid, 1, 1);
+	fdb = fdb_create(br, source, addr, vid, 1, 1, NO_GARP_LOCK);
 	if (!fdb)
 		return -ENOMEM;
 
@@ -623,8 +633,9 @@ static int is_physical_port(struct net_bridge *br, struct net_bridge_port *port)
 	return phys_port && phys_port == port;
 }
 
-void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
-		   const unsigned char *addr, u16 vid, bool added_by_user)
+static
+void __br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
+		     const unsigned char *addr, u16 vid, bool added_by_user)
 {
 	struct net_bridge_fdb_entry *fdb;
 	bool fdb_modified = false;
@@ -667,7 +678,7 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 		}
 	} else {
 		spin_lock(&br->hash_lock);
-		fdb = fdb_create(br, source, addr, vid, 0, 0);
+		fdb = fdb_create(br, source, addr, vid, 0, 0, NO_GARP_LOCK);
 		if (fdb) {
 			if (unlikely(added_by_user))
 				fdb->added_by_user = 1;
@@ -682,6 +693,81 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 	}
 }
 
+int br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
+                  struct sk_buff *skb, u16 vid, bool added_by_user)
+{
+	const unsigned char *addr = eth_hdr(skb)->h_source;
+	struct net_bridge_fdb_entry *fdb;
+
+       /* some users want to always flood. */
+       if (hold_time(br) == 0)
+               return 1;
+
+       /* ignore packets unless we are using this port */
+       if (!(source->state == BR_STATE_LEARNING ||
+             source->state == BR_STATE_FORWARDING))
+               return 1;
+
+       fdb = fdb_find_rcu(&br->fdb_hash_tbl, addr, vid);
+       if (likely(fdb)) {
+               /*
+                * If this is an address arriving on the physical port
+                * which we have previously seen on a non-physical
+                * port then ignore it.
+                *
+                * _Unless_ it is a broadcast ARP reply in which case
+                * the guest in question has migrated. However we lock
+                * out updates due to broadcast ARP replies received
+                * on the physical port for a configurable amount of
+                * time after any broadcast ARP from the same source
+                * address received on a non-physical link -- this is
+                * order to avoid incorrect learning when a broadcast
+                * ARP transmitted by a VM on this host comes back in
+                * another bond link and causes the bridge to learn
+                * the MAC on the exernal port.
+                */
+               if (!is_physical_port(br, fdb->dst) && is_physical_port(br, source)) {
+
+                       if (!is_gratuitous_arp(skb))
+                               return 0;
+
+                       if (time_before(jiffies, fdb->garp_lock_until))
+                               return 0;
+               }
+
+               /* attempt to update an entry for a local interface */
+               if (unlikely(fdb->is_local)) {
+                       if (net_ratelimit())
+                               br_warn(br, "received packet on %s with "
+                                               "own address as source address\n",
+                                               source->dev->name);
+                       return 0;
+               } else {
+                       if (is_gratuitous_arp(skb) && !is_physical_port(br, source))
+                               fdb->garp_lock_until = jiffies + (fdb_garp_lock_time * HZ);
+
+                       /* fastpath: update of existing entry */
+                       fdb->dst = source;
+                       fdb->updated = jiffies;
+               }
+       } else {
+               spin_lock(&br->hash_lock);
+               if (likely(!br_fdb_find(br, addr, vid))) {
+                       unsigned long garp_lock = NO_GARP_LOCK;
+                       if (is_gratuitous_arp(skb) && !is_physical_port(br, source))
+                               garp_lock = jiffies + (fdb_garp_lock_time * HZ);
+                       fdb = fdb_create(br, source, addr, vid, 0, 0, garp_lock);
+                       if (fdb)
+                               fdb_notify(br, fdb, RTM_NEWNEIGH, true);
+               }
+               /* else  we lose race and someone else inserts
+                * it first, don't bother updating
+                */
+               spin_unlock(&br->hash_lock);
+       }
+       return 1;
+}
+
 static int fdb_to_nud(const struct net_bridge *br,
 		      const struct net_bridge_fdb_entry *fdb)
 {
@@ -859,7 +945,7 @@ static int fdb_add_entry(struct net_bridge *br, struct net_bridge_port *source,
 		if (!(flags & NLM_F_CREATE))
 			return -ENOENT;
 
-		fdb = fdb_create(br, source, addr, vid, 0, 0);
+		fdb = fdb_create(br, source, addr, vid, 0, 0, NO_GARP_LOCK);
 		if (!fdb)
 			return -ENOMEM;
 
@@ -922,7 +1008,7 @@ static int __br_fdb_add(struct ndmsg *ndm, struct net_bridge *br,
 		}
 		local_bh_disable();
 		rcu_read_lock();
-		br_fdb_update(br, p, addr, vid, true);
+		__br_fdb_update(br, p, addr, vid, true);
 		rcu_read_unlock();
 		local_bh_enable();
 	} else if (ndm->ndm_flags & NTF_EXT_LEARNED) {
@@ -1148,7 +1234,7 @@ int br_fdb_external_learn_add(struct net_bridge *br, struct net_bridge_port *p,
 
 	fdb = br_fdb_find(br, addr, vid);
 	if (!fdb) {
-		fdb = fdb_create(br, p, addr, vid, 0, 0);
+		fdb = fdb_create(br, p, addr, vid, 0, 0, NO_GARP_LOCK);
 		if (!fdb) {
 			err = -ENOMEM;
 			goto err_unlock;
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 7207427..2b24c5e 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -94,7 +94,8 @@ int br_handle_frame_finish(struct net *net, struct sock *sk, struct sk_buff *skb
 	/* insert into forwarding database after filtering to avoid spoofing */
 	br = p->br;
 	if (p->flags & BR_LEARNING)
-		br_fdb_update(br, p, eth_hdr(skb)->h_source, vid, false);
+		if (!br_fdb_update(br, p, skb, vid, false))
+			goto drop;
 
 	local_rcv = !!(br->dev->flags & IFF_PROMISC);
 	dest = eth_hdr(skb)->h_dest;
@@ -182,22 +183,30 @@ int br_handle_frame_finish(struct net *net, struct sock *sk, struct sk_buff *skb
 }
 EXPORT_SYMBOL_GPL(br_handle_frame_finish);
 
-static void __br_handle_local_finish(struct sk_buff *skb)
+static int __br_handle_local_finish(struct sk_buff *skb)
 {
 	struct net_bridge_port *p = br_port_get_rcu(skb->dev);
 	u16 vid = 0;
 
 	/* check if vlan is allowed, to avoid spoofing */
-	if (p->flags & BR_LEARNING && br_should_learn(p, skb, &vid))
-		br_fdb_update(p->br, p, eth_hdr(skb)->h_source, vid, false);
+	if (p->flags & BR_LEARNING && br_should_learn(p, skb, &vid)) {
+		if (!br_fdb_update(p->br, p, skb, vid, false))
+			return 1;
+	}
+	return 0;
 }
 
 /* note: already called with rcu_read_lock */
 static int br_handle_local_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
 	struct net_bridge_port *p = br_port_get_rcu(skb->dev);
+	int rc;
 
-	__br_handle_local_finish(skb);
+	rc = __br_handle_local_finish(skb);
+	if (rc) {
+		kfree_skb(skb);
+		return rc;
+	}
 
 	BR_INPUT_SKB_CB(skb)->brdev = p->br->dev;
 	br_pass_frame_up(skb);
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 1fdfb06..106b13a 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -185,6 +185,8 @@ struct net_bridge_fdb_entry {
 					added_by_external_learn:1,
 					offloaded:1;
 
+	unsigned long			garp_lock_until;
+
 	/* write-heavy members should not affect lookups */
 	unsigned long			updated ____cacheline_aligned_in_smp;
 	unsigned long			used;
@@ -547,8 +549,8 @@ int br_fdb_fillbuf(struct net_bridge *br, void *buf, unsigned long count,
 		   unsigned long off);
 int br_fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
 		  const unsigned char *addr, u16 vid);
-void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
-		   const unsigned char *addr, u16 vid, bool added_by_user);
+int br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
+		  struct sk_buff *skb, u16 vid, bool added_by_user);
 
 int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 		  struct net_device *dev, const unsigned char *addr, u16 vid);
